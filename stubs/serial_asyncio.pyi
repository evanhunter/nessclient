import asyncio
from typing import Optional, Any, Callable, ParamSpec, Tuple
import serial

_P = ParamSpec("_P")

class SerialTransport(asyncio.Transport):
    def __init__(
        self,
        loop: asyncio.AbstractEventLoop,
        protocol: asyncio.Protocol,
        serial_instance: serial.Serial,
    ): ...
    @property
    def loop(self) -> asyncio.AbstractEventLoop: ...
    @property
    def serial(self) -> serial.Serial: ...
    def get_extra_info(self, name: str, default: Optional[Any] = ...) -> Any: ...
    def __repr__(self) -> str: ...
    def is_closing(self) -> bool: ...
    def close(self) -> None: ...
    def write(self, data: bytes) -> None: ...
    def can_write_eof(self) -> bool: ...
    def resume_reading(self) -> None: ...
    def set_write_buffer_limits(
        self, high: Optional[int] = ..., low: Optional[int] = ...
    ) -> None: ...
    def get_write_buffer_size(self) -> int: ...
    def write_eof(self) -> None: ...
    def abort(self) -> None: ...
    def flush(self) -> None: ...

async def create_serial_connection(
    loop: asyncio.AbstractEventLoop,
    protocol_factory: Callable[[], asyncio.Protocol],
    url: str,
    *args: _P.args,
    **kwargs: _P.kwargs
) -> Tuple[SerialTransport, asyncio.Protocol]: ...
